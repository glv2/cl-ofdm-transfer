#+TITLE: ofdm-transfer
#+AUTHOR: Guillaume LE VAILLANT
#+DATE: 2021-10-08
#+EMAIL: glv@posteo.net
#+LANGUAGE: en
#+OPTIONS: num:nil toc:nil html-postamble:nil html-scripts:nil
#+HTML_DOCTYPE: html5

* Description

*ofdm-transfer* is a Common Lisp library to send or receive data by software
defined radio using the OFDM modulation. It uses bindings to the
libofdm-transfer C library.

* License

*ofdm-transfer* is released under the GPL-3 license or later. See the
[[file:LICENSE][LICENSE]] file for details.

* Dependencies

*ofdm-transfer* requires:
 - [[https://common-lisp.net/project/cffi/][cffi]]
 - [[https://github.com/glv2/cl-octet-streams][cl-octet-streams]]
 - [[https://github.com/Shinmera/float-features][float-features]]
 - [[https://github.com/glv2/ofdm-transfer][libofdm-transfer]]

The tests also require:
 - [[https://common-lisp.net/project/fiveam/][fiveam]]

* API

After loading the library with ~(asdf:load-system "ofdm-transfer")~ or
~(quicklisp:quickload "ofdm-transfer")~, the functions will be available
in the ~ofdm-transfer~ package.

** High level

The key parameters of the following functions match the ones described in
[[https://github.com/glv2/ofdm-transfer/blob/master/README][ofdm-transfer/README]].

#+BEGIN_SRC lisp
(transmit-file file
               &key
                 radio-driver sample-rate bit-rate frequency frequency-offset
                 gain ppm subcarrier-modulation subcarriers cyclic-prefix-length
                 taper-length inner-fec outer-fec id dump final-delay)
=> T
#+END_SRC

Transmit the data from /file/.

#+BEGIN_SRC lisp
(receive-file file
              &key
                radio-driver sample-rate bit-rate frequency frequency-offset
                gain ppm subcarrier-modulation subcarriers cyclic-prefix-length
                taper-length inner-fec outer-fec id dump timeout)
=> T
#+END_SRC

Receive data into /file/.

#+BEGIN_SRC lisp
(transmit-stream stream
                 &key
                   radio-driver sample-rate bit-rate frequency frequency-offset
                   gain ppm subcarrier-modulation subcarriers
                   cyclic-prefix-length taper-length inner-fec outer-fec id dump
                   final-delay)
=> T
#+END_SRC

Transmit the data from /stream/.

#+BEGIN_SRC lisp
(receive-stream stream
                &key
                  radio-driver sample-rate bit-rate frequency frequency-offset
                  gain ppm subcarrier-modulation subcarriers
                  cyclic-prefix-length taper-length inner-fec outer-fec id dump
                  timeout)
=> T
#+END_SRC

Receive data into /stream/.

#+BEGIN_SRC lisp
(transmit-buffer buffer
                 &key
                   start end radio-driver sample-rate bit-rate frequency
                   frequency-offset gain ppm subcarrier-modulation subcarriers
                   cyclic-prefix-length taper-length inner-fec outer-fec id
                   dump final-delay)
=> T
#+END_SRC

Transmit the data between /start/ and /end/ in /buffer/.

#+BEGIN_SRC lisp
(receive-buffer &key
                  radio-driver sample-rate bit-rate frequency frequency-offset
                  gain ppm subcarrier-modulation subcarriers
                  cyclic-prefix-length taper-length inner-fec outer-fec id dump
                  timeout)
=> bytes
#+END_SRC

Receive data into a new octet vector and return it.

#+BEGIN_SRC lisp
(receive-callback function
                  &key
                    radio-driver sample-rate bit-rate frequency frequency-offset
                    gain ppm subcarrier-modulation subcarriers
                    cyclic-prefix-length taper-length inner-fec outer-fec id dump
                    timeout)
=> T
#+END_SRC

Receive data and call a /function/ on it. The /function/ must take one octet
vector as argument.

** Low level

#+BEGIN_SRC lisp
(verbosity)
=> integer

(setf (verbosity) value)
 => integer
#+END_SRC

Get or set the verbosity level.

#+BEGIN_SRC lisp
  (make-transfer (&key
                    radio-driver emit file data-callback callback-context
                    sample-rate bit-rate frequency frequency-offset gain
                    ppm subcarrier-modulation subcarriers cyclic-prefix-length
                    taper-length inner-fec outer-fec id dump timeout)
  => foreign pointer
#+END_SRC

Initialize a transfer.

#+BEGIN_SRC lisp
(free-transfer transfer)
#+END_SRC

Cleanup after a finished transfer.

#+BEGIN_SRC lisp
(start-transfer transfer)
#+END_SRC

Start a transfer and return when finished.

#+BEGIN_SRC lisp
(stop-transfer transfer)
#+END_SRC

Interrupt a transfer.

#+BEGIN_SRC lisp
(stop-all-transfers transfer)
#+END_SRC

Interrupt all transfers.

* Tests

The tests can be run with ~(asdf:test-system "ofdm-transfer")~.
